name: Build, Test, and Publish Python Package
on:
  workflow_dispatch:  # Added for manual triggering
  push:
    branches: [ main ]
    tags:
      - 'v*'  # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        echo "Python version:"
        python --version
        echo "Upgrading pip..."
        python -m pip install --upgrade pip
        echo "Installing build dependencies..."
        pip install build pytest twine
        echo "Installing package..."
        pip install .
        echo "Installed packages:"
        pip list
    - name: Run tests
      run: |
        echo "Running tests..."
        pytest
        echo "Tests completed."
    - name: Build package
      if: success()
      run: |
        echo "Building package..."
        python -m build
        echo "Package built successfully"
        echo "Contents of dist directory:"
        ls -l dist/
    - name: Upload dist
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
  publish:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || github.event_name == 'workflow_dispatch'
    steps:
    - name: Diagnostic Information
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "GitHub ref: ${{ github.ref }}"
        echo "Is this a tag push? ${{ startsWith(github.ref, 'refs/tags/v') }}"
        echo "All GitHub context:"
        echo '${{ toJson(github) }}'
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install Twine
      run: |
        echo "Installing Twine..."
        pip install twine
        echo "Twine version:"
        twine --version
    - uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    - name: List contents of dist directory
      run: |
        echo "Contents of dist directory:"
        ls -l dist/
    - name: Publish distribution to PyPI
      env:
        TWINE_USERNAME: '__token__'
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "Checking distribution files..."
        twine check dist/*
        echo "Attempting to upload to PyPI..."
        twine upload --verbose dist/*
